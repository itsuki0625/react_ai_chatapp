name: Build, Push, and Deploy PROD

on:
  workflow_dispatch: # 手動実行

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}

jobs:
  # ─────────────────────────────────────────────────
  # 1) Backend イメージのビルド & Push (本番環境)
  # ─────────────────────────────────────────────────
  build-push-backend-prod:
    environment: Production
    runs-on: ubuntu-latest
    outputs:
      latest_image_uri: ${{ steps.build-image.outputs.latest_image_uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build PROD backend image
        id: build-image
        run: |
          REGISTRY=$(echo "${{ env.ECR_REGISTRY }}" | sed 's:/*$::')
          IMAGE_URI="${REGISTRY}/prod-backend:latest"
          echo "Building image: $IMAGE_URI"
          docker build \
            --file backend/Dockerfile.prod \
            --tag  $IMAGE_URI \
            backend
          echo "latest_image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Push PROD backend to ECR
        run: |
          REGISTRY=$(echo "${{ env.ECR_REGISTRY }}" | sed 's:/*$::')
          docker push ${REGISTRY}/prod-backend:latest

  # ─────────────────────────────────────────────────
  # 2) Frontend イメージのビルド & Push (本番環境)
  # ─────────────────────────────────────────────────
  build-push-frontend-prod:
    environment: Production
    runs-on: ubuntu-latest
    outputs:
      latest_image_uri: ${{ steps.build-image.outputs.latest_image_uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build PROD frontend image
        id: build-image
        run: |
          REGISTRY=$(echo "${{ env.ECR_REGISTRY }}" | sed 's:/*$::')
          IMAGE_URI="${REGISTRY}/prod-frontend:latest"
          echo "Building image: $IMAGE_URI"
          docker build \
            --file study-support-app/Dockerfile.prod \
            --tag  $IMAGE_URI \
            study-support-app
          echo "latest_image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Push PROD frontend to ECR
        run: |
          REGISTRY=$(echo "${{ env.ECR_REGISTRY }}" | sed 's:/*$::')
          docker push ${REGISTRY}/prod-frontend:latest

  # ─────────────────────────────────────────────────
  # 3) Backend を ECS にデプロイ (本番環境)
  # ─────────────────────────────────────────────────
  deploy-backend-prod:
    environment: Production
    needs: build-push-backend-prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}
      - name: Render ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: AWS/backend-task-def-prod.json
          container-name: backend
          image: ${{ needs.build-push-backend-prod.outputs.latest_image_uri }}
      - name: Deploy Backend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: prod-api
          service: prod-api-service
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          wait-for-service-stability: true

  # ─────────────────────────────────────────────────
  # 4) Frontend を ECS にデプロイ (本番環境)
  # ─────────────────────────────────────────────────
  deploy-frontend-prod:
    environment: Production
    needs: build-push-frontend-prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}
      - name: Render ECS task definition
        id: render-frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: AWS/prod-front.json
          container-name: frontend
          image: ${{ needs.build-push-frontend-prod.outputs.latest_image_uri }}
      - name: Deploy Frontend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: prod-front
          service: prod-front-service
          task-definition: ${{ steps.render-frontend-task-def.outputs.task-definition }}
          wait-for-service-stability: true 