name: Build & Push PROD Docker Images to ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}

jobs:
  # Backend STG イメージのビルド & プッシュ
  build-push-backend-prod:
    environment: Production
    runs-on: ubuntu-latest
    outputs:
      latest_image_uri: ${{ steps.build-image.outputs.latest_image_uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build PROD backend image
        id: build-image
        run: |
          REGISTRY=$(echo "${{ secrets.AWS_ECR_REGISTRY }}" | sed 's:/*$::')
          IMAGE_URI="${REGISTRY}/prod-backend:latest"
          echo "Building image: $IMAGE_URI"
          docker build \
            --file backend/Dockerfile.prod \
            --tag  $IMAGE_URI \
            backend
          # デバッグ出力を追加
          echo "Setting output: latest_image_uri=$IMAGE_URI"
          echo "latest_image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Push PROD backend to ECR
        run: |
          REGISTRY=$(echo "${{ secrets.AWS_ECR_REGISTRY }}" | sed 's:/*$::')
          docker push ${REGISTRY}/prod-backend:latest
          
      - name: Verify output value
        run: |
          echo "Verifying output value: ${{ steps.build-image.outputs.latest_image_uri }}"

  # Frontend PROD イメージのビルド & プッシュ
  build-push-frontend-prod:
    environment: Production
    runs-on: ubuntu-latest
    outputs:
      latest_image_uri: ${{ steps.build-image.outputs.latest_image_uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build PROD frontend image
        id: build-image
        run: |
          REGISTRY=$(echo "${{ secrets.AWS_ECR_REGISTRY }}" | sed 's:/*$::')
          IMAGE_URI="${REGISTRY}/prod-frontend:latest"
          echo "Building image: $IMAGE_URI"
          docker build \
            --file study-support-app/Dockerfile.prod \
            --tag  $IMAGE_URI \
            study-support-app
          # デバッグ出力を追加
          echo "Setting output: latest_image_uri=$IMAGE_URI"
          echo "latest_image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Push PROD frontend to ECR
        run: |
          REGISTRY=$(echo "${{ secrets.AWS_ECR_REGISTRY }}" | sed 's:/*$::')
          docker push ${REGISTRY}/prod-frontend:latest
          
      - name: Verify output value
        run: |
          echo "Verifying output value: ${{ steps.build-image.outputs.latest_image_uri }}"

  deploy-backend-prod:
    needs: build-push-backend-prod
    environment: Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}
      - name: Debug-Backend
        run: |
          echo "============== DEBUG INFO =============="
          echo "Backend URI: ${{ needs.build-push-backend-prod.outputs.latest_image_uri }}"
          echo "========================================"
      - name: Debug alternative approach
        run: |
          echo "Using hardcoded image URI as a fallback"
          REGISTRY=$(echo "${{ secrets.AWS_ECR_REGISTRY }}" | sed 's:/*$::')
          echo "Registry: $REGISTRY"
          
      - name: Render ECS task definition (Fallback)
        id: render-task-def-fallback
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: AWS/backend-task-def-prod.json
          container-name: backend
          image: "${{ secrets.AWS_ECR_REGISTRY }}/prod-backend:latest"
          
      - name: Debug fallback output
        run: |
          echo "============== FALLBACK OUTPUT =============="
          echo "Fallback Task definition: ${{ steps.render-task-def-fallback.outputs.task-definition }}"
          echo "==============================================="
          
      - name: Deploy Backend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: prod-api
          service: prod-api-service
          task-definition: ${{ steps.render-task-def-fallback.outputs.task-definition }}
          wait-for-service-stability: true

  deploy-frontend-prod:
    needs: build-push-frontend-prod
    environment: Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}
      - name: Debug-Frontend
        run: |
          echo "============== DEBUG INFO =============="
          echo "Frontend URI: ${{ needs.build-push-frontend-prod.outputs.latest_image_uri }}"
          echo "========================================"
      - name: Debug Frontend alternative approach
        run: |
          echo "Using hardcoded image URI as a fallback"
          REGISTRY=$(echo "${{ secrets.AWS_ECR_REGISTRY }}" | sed 's:/*$::')
          echo "Registry: $REGISTRY"
          
      - name: Render ECS task definition (Fallback)
        id: render-frontend-task-def-fallback
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: AWS/prod-front.json
          container-name: frontend
          image: "${{ secrets.AWS_ECR_REGISTRY }}/prod-frontend:latest"
          
      - name: Debug frontend fallback output
        run: |
          echo "============== FALLBACK OUTPUT =============="
          echo "Fallback Task definition: ${{ steps.render-frontend-task-def-fallback.outputs.task-definition }}"
          echo "==============================================="
          
      - name: Deploy Frontend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: prod-front
          service: prod-front-service
          task-definition: ${{ steps.render-frontend-task-def-fallback.outputs.task-definition }}
          wait-for-service-stability: true 