name: STG Environment Wake Up

on:
  workflow_dispatch:
    inputs:
      duration:
        description: '起動時間（時間後に自動停止）'
        required: true
        default: '4'
        type: choice
        options:
        - '1'
        - '2'
        - '4'
        - '8'
        - '24'
      purpose:
        description: '使用目的'
        required: false
        type: string
        default: 'テスト・開発作業'
  
  # Webhook経由での起動も可能
  repository_dispatch:
    types: [wake-stg]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  check-if-already-running:
    runs-on: ubuntu-latest
    environment: Preview
    outputs:
      is_running: ${{ steps.check_status.outputs.status }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: 🔍 Check Current Status
        id: check_status
        run: |
          echo "現在のSTG環境状態を確認中..."
          
          # Frontend service status
          FRONTEND_COUNT=$(aws ecs describe-services \
            --cluster stg-front \
            --services stg-front-service \
            --query 'services[0].desiredCount' \
            --output text 2>/dev/null || echo "0")
          
          # Backend service status  
          BACKEND_COUNT=$(aws ecs describe-services \
            --cluster stg-api \
            --services stg-api-service \
            --query 'services[0].desiredCount' \
            --output text 2>/dev/null || echo "0")
          
          echo "Frontend desired count: $FRONTEND_COUNT"
          echo "Backend desired count: $BACKEND_COUNT"
          
          if [ "$FRONTEND_COUNT" = "1" ] && [ "$BACKEND_COUNT" = "1" ]; then
            echo "status=running" >> $GITHUB_OUTPUT
            echo "✅ STG環境は既に起動中です"
          else
            echo "status=stopped" >> $GITHUB_OUTPUT
            echo "🛑 STG環境は停止中です"
          fi

  already-running:
    runs-on: ubuntu-latest
    needs: check-if-already-running
    if: needs.check-if-already-running.outputs.is_running == 'running'
    
    steps:
      - name: ℹ️ Already Running
        run: |
          echo "✅ STG環境は既に起動中です"
          echo "現在のサービス状態を確認してください"

  wake-up-stg:
    runs-on: ubuntu-latest
    environment: Preview
    needs: check-if-already-running
    if: needs.check-if-already-running.outputs.is_running == 'stopped'
    
    steps:
      - name: 🚀 STG Wake Up Summary
        run: |
          echo "🎯 STG環境起動開始"
          echo "⏰ 起動時間: ${{ github.event.inputs.duration || '4' }}時間"
          echo "📝 使用目的: ${{ github.event.inputs.purpose || 'API経由起動' }}"
          echo "💰 想定コスト: ~$0.10-2"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: 🚀 Start ECS Services
        run: |
          echo "🚀 ECSサービス起動中..."
          
          # Start Frontend service
          echo "Frontend service起動中..."
          aws ecs update-service \
            --cluster stg-front \
            --service stg-front-service \
            --desired-count 1
          
          # Start Backend service
          echo "Backend service起動中..."
          aws ecs update-service \
            --cluster stg-api \
            --service stg-api-service \
            --desired-count 1
          
          echo "✅ ECSサービス起動コマンド完了"

      - name: ⏳ Wait for Services to Start
        run: |
          echo "⏳ サービス起動完了まで待機中..."
          
          # Wait for frontend service
          echo "Frontend service起動待機中..."
          aws ecs wait services-stable \
            --cluster stg-front \
            --services stg-front-service \
            --cli-read-timeout 300 \
            --cli-connect-timeout 60 || echo "Frontend timeout (続行)"
          
          # Wait for backend service
          echo "Backend service起動待機中..."
          aws ecs wait services-stable \
            --cluster stg-api \
            --services stg-api-service \
            --cli-read-timeout 300 \
            --cli-connect-timeout 60 || echo "Backend timeout (続行)"

      - name: 🔍 Get Service URLs
        id: get_urls
        run: |
          echo "🔍 サービスURLを取得中..."
          
          # Get Frontend task public IP
          FRONTEND_TASK_ARN=$(aws ecs list-tasks \
            --cluster stg-front \
            --service-name stg-front-service \
            --query 'taskArns[0]' \
            --output text 2>/dev/null || echo "")
          
          if [ "$FRONTEND_TASK_ARN" != "" ] && [ "$FRONTEND_TASK_ARN" != "None" ]; then
            FRONTEND_ENI=$(aws ecs describe-tasks \
              --cluster stg-front \
              --tasks $FRONTEND_TASK_ARN \
              --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
              --output text 2>/dev/null || echo "")
            
            if [ "$FRONTEND_ENI" != "" ]; then
              FRONTEND_IP=$(aws ec2 describe-network-interfaces \
                --network-interface-ids $FRONTEND_ENI \
                --query 'NetworkInterfaces[0].Association.PublicIp' \
                --output text 2>/dev/null || echo "")
              echo "frontend_ip=$FRONTEND_IP" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Get Backend task public IP
          BACKEND_TASK_ARN=$(aws ecs list-tasks \
            --cluster stg-api \
            --service-name stg-api-service \
            --query 'taskArns[0]' \
            --output text 2>/dev/null || echo "")
          
          if [ "$BACKEND_TASK_ARN" != "" ] && [ "$BACKEND_TASK_ARN" != "None" ]; then
            BACKEND_ENI=$(aws ecs describe-tasks \
              --cluster stg-api \
              --tasks $BACKEND_TASK_ARN \
              --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
              --output text 2>/dev/null || echo "")
            
            if [ "$BACKEND_ENI" != "" ]; then
              BACKEND_IP=$(aws ec2 describe-network-interfaces \
                --network-interface-ids $BACKEND_ENI \
                --query 'NetworkInterfaces[0].Association.PublicIp' \
                --output text 2>/dev/null || echo "")
              echo "backend_ip=$BACKEND_IP" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 📋 Wake Up Complete
        run: |
          echo ""
          echo "🎉 STG環境起動完了!"
          echo "⏰ 起動時間: ${{ github.event.inputs.duration || '4' }}時間"
          echo "📝 使用目的: ${{ github.event.inputs.purpose || 'API経由起動' }}"
          echo ""
          
          if [ "${{ steps.get_urls.outputs.frontend_ip }}" != "" ]; then
            echo "🌐 Frontend URL: http://${{ steps.get_urls.outputs.frontend_ip }}:3000"
          else
            echo "⚠️ Frontend IP取得に失敗（起動中の可能性）"
          fi
          
          if [ "${{ steps.get_urls.outputs.backend_ip }}" != "" ]; then
            echo "🌐 Backend URL: http://${{ steps.get_urls.outputs.backend_ip }}:5050"
          else
            echo "⚠️ Backend IP取得に失敗（起動中の可能性）"
          fi
          
          echo ""
          echo "📋 CloudFlare設定更新:"
          echo "1. CloudFlareダッシュボードにログイン"
          echo "2. DNS設定でstg.smartao.jpのAレコードを更新"
          echo "3. 新しいIP: ${{ steps.get_urls.outputs.frontend_ip || 'IP取得失敗' }}"
          echo ""
          echo "🛑 使用後は必ず停止してください:"
          echo "GitHub Actions: 'STG Environment Sleep' ワークフロー実行"
          echo ""
          echo "💰 想定コスト: ${{ github.event.inputs.duration || '4' }}時間で約$0.40-2" 