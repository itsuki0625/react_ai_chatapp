name: STG Environment Wake Up

on:
  workflow_dispatch:
    inputs:
      duration:
        description: '起動時間（時間後に自動停止）'
        required: true
        default: '4'
        type: choice
        options:
        - '1'
        - '2'
        - '4'
        - '8'
        - '24'
      purpose:
        description: '使用目的'
        required: false
        type: string
        default: 'テスト・開発作業'
  
  # Webhook経由での起動も可能
  repository_dispatch:
    types: [wake-stg]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  check-if-already-running:
    runs-on: ubuntu-latest
    environment: Preview
    outputs:
      is_running: ${{ steps.check_status.outputs.status }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: 🔍 Check Current Status
        id: check_status
        run: |
          echo "現在のSTG環境状態を確認中..."
          
          # Frontend service status
          FRONTEND_COUNT=$(aws ecs describe-services \
            --cluster stg-front \
            --services stg-front-service \
            --query 'services[0].desiredCount' \
            --output text 2>/dev/null || echo "0")
          
          # Backend service status  
          BACKEND_COUNT=$(aws ecs describe-services \
            --cluster stg-api \
            --services stg-api-service \
            --query 'services[0].desiredCount' \
            --output text 2>/dev/null || echo "0")
          
          echo "Frontend desired count: $FRONTEND_COUNT"
          echo "Backend desired count: $BACKEND_COUNT"
          
          if [ "$FRONTEND_COUNT" = "1" ] && [ "$BACKEND_COUNT" = "1" ]; then
            echo "status=running" >> $GITHUB_OUTPUT
            echo "✅ STG環境は既に起動中です"
          else
            echo "status=stopped" >> $GITHUB_OUTPUT
            echo "🛑 STG環境は停止中です"
          fi

  already-running:
    runs-on: ubuntu-latest
    needs: check-if-already-running
    if: needs.check-if-already-running.outputs.is_running == 'running'
    
    steps:
      - name: ℹ️ Already Running
        run: |
          echo "✅ STG環境は既に起動中です"
          echo "現在のサービス状態を確認してください"

  wake-up-stg:
    runs-on: ubuntu-latest
    environment: Preview
    needs: check-if-already-running
    if: needs.check-if-already-running.outputs.is_running == 'stopped'
    
    steps:
      - name: 🚀 STG Wake Up Summary
        run: |
          echo "🎯 STG環境起動開始"
          echo "⏰ 起動時間: ${{ github.event.inputs.duration || '4' }}時間"
          echo "📝 使用目的: ${{ github.event.inputs.purpose || 'API経由起動' }}"
          echo "💰 想定コスト: ~$0.10-2"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: 🚀 Start ECS Services
        run: |
          echo "🚀 ECSサービス起動中..."
          
          # Start Frontend service
          echo "Frontend service起動中..."
          aws ecs update-service \
            --cluster stg-front \
            --service stg-front-service \
            --desired-count 1
          
          # Start Backend service
          echo "Backend service起動中..."
          aws ecs update-service \
            --cluster stg-api \
            --service stg-api-service \
            --desired-count 1
          
          echo "✅ ECSサービス起動コマンド完了"

      - name: ⏳ Wait for Services to Start
        run: |
          echo "⏳ サービス起動完了まで待機中..."
          
          # Wait for frontend service
          echo "Frontend service起動待機中..."
          aws ecs wait services-stable \
            --cluster stg-front \
            --services stg-front-service \
            --cli-read-timeout 300 \
            --cli-connect-timeout 60 || echo "Frontend timeout (続行)"
          
          # Wait for backend service
          echo "Backend service起動待機中..."
          aws ecs wait services-stable \
            --cluster stg-api \
            --services stg-api-service \
            --cli-read-timeout 300 \
            --cli-connect-timeout 60 || echo "Backend timeout (続行)"

      - name: 🔍 Get ALB DNS Name
        id: get_urls
        run: |
          echo "🔍 ALB DNS名を取得中..."
          
          # ALB DNS名を取得
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names stg-main-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text 2>/dev/null || echo "")
          
          echo "ALB DNS: $ALB_DNS"
          
          if [ "$ALB_DNS" != "" ] && [ "$ALB_DNS" != "None" ] && [ "$ALB_DNS" != "null" ]; then
            echo "✅ ALB DNS取得成功: $ALB_DNS"
            echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
          else
            echo "⚠️ ALB DNS取得に失敗"
            echo "alb_dns=" >> $GITHUB_OUTPUT
          fi

      - name: 📋 Wake Up Complete
        run: |
          echo ""
          echo "🎉 STG環境起動完了!"
          echo "⏰ 起動時間: ${{ github.event.inputs.duration || '4' }}時間"
          echo "📝 使用目的: ${{ github.event.inputs.purpose || 'API経由起動' }}"
          echo ""
          
          ALB_DNS="${{ steps.get_urls.outputs.alb_dns }}"
          
          if [ "$ALB_DNS" != "" ] && [ "$ALB_DNS" != "null" ]; then
            echo "🌐 Frontend URL: https://stg.smartao.jp"
            echo "🌐 Backend API URL: https://api-stg.smartao.jp"
            echo "🌐 ALB DNS Name: $ALB_DNS"
          else
            echo "⚠️ ALB DNS取得に失敗"
            echo "📋 手動確認コマンド:"
            echo "aws elbv2 describe-load-balancers --names stg-main-alb"
          fi
          
          echo ""
          echo "📋 CloudFlare設定更新:"
          echo "1. CloudFlareダッシュボードにログイン"
          echo "2. DNS設定で以下のCNAMEレコードを設定:"
          if [ "$ALB_DNS" != "" ] && [ "$ALB_DNS" != "null" ]; then
            echo "   - stg.smartao.jp → $ALB_DNS"
            echo "   - api-stg.smartao.jp → $ALB_DNS"
          else
            echo "   - CNAME: 手動で確認が必要"
          fi
          echo ""
          echo "🛑 使用後は必ず停止してください:"
          echo "GitHub Actions: 'STG Environment Sleep' ワークフロー実行"
          echo ""
          echo "💰 想定コスト: ${{ github.event.inputs.duration || '4' }}時間で約$1.10-3 (ALB込み)"
          echo ""
          echo "🔧 トラブルシューティング:"
          echo "ALBが応答しない場合は、ECSタスクの起動完了まで数分待機してください" 