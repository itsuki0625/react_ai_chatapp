name: Build & Push STG Docker Images to ECR

on:
  push:
    branches:
      - stg
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}

jobs:
  # Backend STG イメージのビルド & プッシュ
  build-push-backend-stg:
    environment: Preview
    runs-on: self-hosted
    outputs:
      latest_image_uri: ${{ steps.build-image.outputs.latest_image_uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Windows環境でのDocker確認
      - name: Check Docker
        run: |
          docker --version
          docker info
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build STG backend image
        id: build-image
        run: |
          $REGISTRY = "${{ secrets.AWS_ECR_REGISTRY }}".TrimEnd('/')
          $IMAGE_URI_LATEST = "${REGISTRY}/stg-backend:latest"
          $IMAGE_URI_STG = "${REGISTRY}/stg-backend:stg"
          Write-Host "Building image: $IMAGE_URI_LATEST"
          docker build `
            --file backend/Dockerfile.stg `
            --tag  $IMAGE_URI_LATEST `
            --tag  $IMAGE_URI_STG `
            backend
          # デバッグ出力を追加
          Write-Host "Setting output: latest_image_uri=$IMAGE_URI_LATEST"
          echo "latest_image_uri=$IMAGE_URI_LATEST" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Push STG backend to ECR
        run: |
          $REGISTRY = "${{ secrets.AWS_ECR_REGISTRY }}".TrimEnd('/')
          docker push "${REGISTRY}/stg-backend:latest"
          docker push "${REGISTRY}/stg-backend:stg"
        shell: powershell
          
      - name: Verify output value
        run: |
          Write-Host "Verifying output value: ${{ steps.build-image.outputs.latest_image_uri }}"
        shell: powershell

  # Frontend STG イメージのビルド & プッシュ
  build-push-frontend-stg:
    environment: Preview
    runs-on: self-hosted
    outputs:
      latest_image_uri: ${{ steps.build-image.outputs.latest_image_uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Windows環境でのDocker確認
      - name: Check Docker
        run: |
          docker --version
          docker info

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build STG frontend image
        id: build-image
        run: |
          $REGISTRY = "${{ secrets.AWS_ECR_REGISTRY }}".TrimEnd('/')
          $IMAGE_URI_LATEST = "${REGISTRY}/stg-frontend:latest"
          $IMAGE_URI_STG = "${REGISTRY}/stg-frontend:stg"
          Write-Host "Building image: $IMAGE_URI_LATEST"
          docker build `
            --file study-support-app/Dockerfile.stg `
            --tag  $IMAGE_URI_LATEST `
            --tag  $IMAGE_URI_STG `
            study-support-app
          # デバッグ出力を追加
          Write-Host "Setting output: latest_image_uri=$IMAGE_URI_LATEST"
          echo "latest_image_uri=$IMAGE_URI_LATEST" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Push STG frontend to ECR
        run: |
          $REGISTRY = "${{ secrets.AWS_ECR_REGISTRY }}".TrimEnd('/')
          docker push "${REGISTRY}/stg-frontend:latest"
          docker push "${REGISTRY}/stg-frontend:stg"
        shell: powershell
          
      - name: Verify output value
        run: |
          Write-Host "Verifying output value: ${{ steps.build-image.outputs.latest_image_uri }}"
        shell: powershell

  deploy-backend-stg:
    needs: build-push-backend-stg
    environment: Preview
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}
      - name: Debug-Backend
        run: |
          Write-Host "============== DEBUG INFO =============="
          Write-Host "Backend URI: ${{ needs.build-push-backend-stg.outputs.latest_image_uri }}"
          Write-Host "========================================"
        shell: powershell
      - name: Debug alternative approach
        run: |
          Write-Host "Using hardcoded image URI as a fallback"
          $REGISTRY = "${{ secrets.AWS_ECR_REGISTRY }}".TrimEnd('/')
          Write-Host "Registry: $REGISTRY"
        shell: powershell
          
      - name: Render ECS task definition (Fallback)
        id: render-task-def-fallback
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: AWS/backend-task-def-stg.json
          container-name: backend
          image: "${{ secrets.AWS_ECR_REGISTRY }}/stg-backend:latest"
          
      - name: Debug fallback output
        run: |
          Write-Host "============== FALLBACK OUTPUT =============="
          Write-Host "Fallback Task definition: ${{ steps.render-task-def-fallback.outputs.task-definition }}"
          Write-Host "==============================================="
        shell: powershell
          
      - name: Deploy Backend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: stg-api
          service: stg-api-service
          task-definition: ${{ steps.render-task-def-fallback.outputs.task-definition }}
          wait-for-service-stability: true

  deploy-frontend-stg:
    needs: build-push-frontend-stg
    environment: Preview
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}
      - name: Debug-Frontend
        run: |
          Write-Host "============== DEBUG INFO =============="
          Write-Host "Frontend URI: ${{ needs.build-push-frontend-stg.outputs.latest_image_uri }}"
          Write-Host "========================================"
        shell: powershell
      - name: Debug Frontend alternative approach
        run: |
          Write-Host "Using hardcoded image URI as a fallback"
          $REGISTRY = "${{ secrets.AWS_ECR_REGISTRY }}".TrimEnd('/')
          Write-Host "Registry: $REGISTRY"
        shell: powershell
          
      - name: Render ECS task definition (Fallback)
        id: render-frontend-task-def-fallback
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: AWS/stg-front.json
          container-name: frontend
          image: "${{ secrets.AWS_ECR_REGISTRY }}/stg-frontend:latest"
          
      - name: Debug frontend fallback output
        run: |
          Write-Host "============== FALLBACK OUTPUT =============="
          Write-Host "Fallback Task definition: ${{ steps.render-frontend-task-def-fallback.outputs.task-definition }}"
          Write-Host "==============================================="
        shell: powershell
          
      - name: Deploy Frontend to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: stg-front
          service: stg-front-service
          task-definition: ${{ steps.render-frontend-task-def-fallback.outputs.task-definition }}
          wait-for-service-stability: true 